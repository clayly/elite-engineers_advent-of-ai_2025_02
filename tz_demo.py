#!/usr/bin/env python3
"""
Demonstration of Technical Specification Collector integration
This shows how the TZ collector works within the existing chat agent
"""

import sys
import os

# Add the day1 directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'day1'))

try:
    from main import TechnicalSpecification, RequirementCategory, Requirement, TZCollectorState
    from pydantic import ValidationError
    import json

    print("üéØ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 50)

    # Test 1: Create individual requirements
    print("\nüìã Test 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")

    req1 = Requirement(
        id="REQ-001",
        category=RequirementCategory.FUNCTIONAL,
        title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        description="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Ö–æ–¥ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é",
        priority="high",
        acceptance_criteria=[
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å",
            "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
            "–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
        ]
    )

    print(f"‚úì –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {req1.title}")

    # Test 2: Create Technical Specification
    print("\nüìÑ Test 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")

    tz_spec = TechnicalSpecification(
        project_name="–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏",
        project_description="–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞",
        requirements=[req1],
        completeness_score=0.3,
        missing_categories=[
            RequirementCategory.NON_FUNCTIONAL,
            RequirementCategory.TECHNICAL,
            RequirementCategory.UI_UX
        ],
        next_questions=[
            "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã?",
            "–ö–∞–∫–æ–π —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
            "–ö–∞–∫–æ–π –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω?"
        ],
        is_ready_for_review=False
    )

    print(f"‚úì –¢–ó —Å–æ–∑–¥–∞–Ω–æ: {tz_spec.project_name}")
    print(f"  - –ü–æ–ª–Ω–æ—Ç–∞: {tz_spec.completeness_score:.0%}")
    print(f"  - –¢—Ä–µ–±–æ–≤–∞–Ω–∏–π: {len(tz_spec.requirements)}")
    print(f"  - –ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é: {len(tz_spec.missing_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    # Test 3: TZ Collector State
    print("\nüîÑ Test 3: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞")

    state = TZCollectorState(
        phase="gathering",
        project_type="web_application",
        current_category=RequirementCategory.FUNCTIONAL,
        requirements_count=1,
        should_complete=False
    )

    print(f"‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ: —Ñ–∞–∑–∞ '{state.phase}', —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π {state.requirements_count}")

    # Test 4: JSON serialization
    print("\nüì¶ Test 4: –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON")

    tz_dict = tz_spec.model_dump()
    print(f"‚úì –¢–ó —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON (—Ä–∞–∑–º–µ—Ä: {len(json.dumps(tz_dict, ensure_ascii=False))} —Å–∏–º–≤–æ–ª–æ–≤)")

    print("\n" + "=" * 50)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¢–ó –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–∞.")
    print("\nüí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python day1/main.py")
    print("2. –í–≤–µ–¥–∏—Ç–µ: /tz –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∞ –¢–ó")
    print("3. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç - —Ä–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install langchain-openai pydantic rich python-dotenv")
except ValidationError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")